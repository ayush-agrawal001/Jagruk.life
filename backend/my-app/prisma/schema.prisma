// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model users {
  id String @id @default(cuid())
  username String @unique
  firstname String
  lastname String
  password String
  email String @unique
  bio String? @default("")
  socialMedia String[]
  posts posts[]
  createdAt DateTime @default(now())
  commentsByMe comments[]
  likesByMe likesOnPosts[]
  replyByMe repliesOnComments[]
  follower followRelationShip[] @relation("follower")
  following followRelationShip[] @relation("following")
}

model posts {
  id String @id @default(cuid())
  title String
  content String
  images String[]
  videos String[]
  authorId String
  author users @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  commentsOnMe comments[]
  likedOnMe likesOnPosts[]
}

model comments {
  id String @id @default(cuid())
  content String
  likesOnComments String[]
  user_id String
  post_id String
  createdAt DateTime @default(now())
  user users @relation(fields: [user_id], references: [id])
  post posts @relation(fields: [post_id], references: [id])
  replyOnMe repliesOnComments[]
}

model  repliesOnComments{
  id String @id @default(cuid())
  content String
  likes String[]
  user_id String
  comments_id String
  createdAt DateTime @default(now())
  repliedBy users @relation(fields: [user_id], references: [id])
  comments comments @relation(fields: [comments_id], references: [id])
}

model  likesOnPosts{
  id String @id @default(cuid())
  user_id String
  post_id String
  createdAt DateTime @default(now())
  likedBy users @relation(fields: [user_id], references: [id])
  post posts @relation(fields: [post_id], references: [id])
  @@unique([user_id, post_id])
}

model followRelationShip {
  id String @id @default(cuid())
  followedBy_id String
  followedTo_id String
  follower users @relation("follower", fields: [followedBy_id], references: [id])
  following users @relation("following", fields: [followedTo_id], references: [id])
  createdAt DateTime @default(now())
  @@unique([followedBy_id, followedTo_id])
}